apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2'
}

def fileFilter = ['**/R.class',
                  '**/R$*x.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  '**/*Test*.*',
                  '**/*$*',
                  'android/**/*.*',
                  '**/*Function*',
                  '**/*_impl*',
                  '**/*.DefaultImpls.*',
                  '**/beagle/view/*.class']

task jacocoTestReport(type: JacocoReport, overwrite: true) {

    def kotlinSrc = "$project.projectDir/src/main/kotlin"
    def javaSrc = "$project.projectDir/src/main/java"
    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    def dependencyTasks
    if (project.plugins.hasPlugin('com.android.application')) {
        dependencyTasks = ['testDebugUnitTest']
        //FIXME uncomment below this if you want instrumented tests on your report
//        dependencyTasks = ['testDebugUnitTest', 'createDebugCoverageReport']
    } else if (project.plugins.hasPlugin("com.android.library")) {
        dependencyTasks = ['testDebugUnitTest']
    }

    dependsOn {
        dependencyTasks
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getSourceDirectories().setFrom([javaSrc, kotlinSrc])
    getClassDirectories().setFrom([javaClasses, kotlinClasses])
    getExecutionData().setFrom([fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/**/*.ec'
    ])], [fileTree(dir: "${System.env.VDTESTING_DOWNLOADED_FILES_DIR}", includes: [
            '*sdcard_coverage.ec'
    ])])

}